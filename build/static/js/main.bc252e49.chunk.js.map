{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","fetch","headers","Authorization","then","response","json","jsonReponse","items","artists","uri","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackURIs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc252e49.chunk.js","sourcesContent":["let accessToken;\r\n\r\nconst clientID = 'df259746dae5461e915d408fde63120b';\r\nconst redirectUri = 'http://fair-camp.surge.sh ';\r\n\r\nconst Spotify = {\r\n    search(term){\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n        {\r\n            headers: { Authorization: `Bearer ${accessToken}` }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonReponse => {\r\n            if(!jsonReponse.tracks){\r\n                return [];\r\n            }\r\n            return jsonReponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artists: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        })\r\n    },\r\n\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken;\r\n        }\r\n\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(accessTokenMatch && expiresInMatch){\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token',null,'/');\r\n            return accessToken;\r\n        }else{\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    savePlaylist(name, trackUris){\r\n        if(!name || !trackUris.length){\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch(`https://api.spotify.com/v1/me`, {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonReponse => {\r\n            userId = jsonReponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonReponse => {\r\n                const playlistId = jsonReponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n        \r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event){\r\n        this.setState({\r\n            term: event.target.value\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\"/>\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }else{\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\n\r\nimport './Tracklist.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass Tracklist extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tracklist;","import React from 'react';\r\n\r\nimport './SearchResults.css';\r\n\r\nimport Tracklist from '../Tracklist/Tracklist';\r\n\r\nclass SearchResults extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <Tracklist tracks={this.props.searchResults} \r\n                onAdd={this.props.onAdd} \r\n                isRemoval={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\n\r\nimport './Playlist.css';\r\n\r\nimport Tracklist from '../Tracklist/Tracklist';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event){\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n                <Tracklist tracks={this.props.playlistTracks} \r\n                onRemove={this.props.onRemove} \r\n                isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    \n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: [] \n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({\n      playlistTracks: tracks\n    })\n  }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({\n      playlistTracks: tracks\n    })\n  }\n\n  updatePlaylistName(name){\n    this.setState({\n      playlistName: name\n    })\n  }\n\n  savePlaylist(){\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({ \n        searchResults: searchResults\n      });\n    });\n  }\n\n  render(){\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults}/>\n            <Playlist playlistName={this.state.playlistName} \n            playlistTracks={this.state.playlistTracks} \n            onRemove={this.removeTrack} \n            onNameChange={this.updatePlaylistName} \n            onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}